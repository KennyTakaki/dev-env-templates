name: CI Workflow

on:
  push:
    branches:
      - 'feature/**'

  pull_request:
    types: [closed]
    branches:
      - main
      - dev

jobs:
  set-stage-variable:
    if: >
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variable for stage
        run: |
          echo "Triggered by ref: ${{ github.ref }}"
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.head_ref }}" == "main" ]]; then
            echo "STAGE=production" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/dev" || "${{ github.head_ref }}" == "dev" ]]; then
            echo "STAGE=development" >> $GITHUB_ENV
          else
            echo "STAGE=preview" >> $GITHUB_ENV
          fi

      - name: Echo current stage
        run: echo "Current stage is $STAGE"

  deploy:
    needs: set-stage-variable
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Deploy to environment
        run: |
          echo "Deploying to $STAGE environment..."
          # TODO: 実際のデプロイ処理を記述（AWS/CDKなど）

  tag-on-main:
    needs: deploy
    if: github.base_ref == 'main' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write # ここだけwrite権限が必要
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          latest=$(git tag --sort=-v:refname | head -n 1)
          echo "Latest tag: $latest"
          echo "latest_tag=$latest" >> $GITHUB_OUTPUT

      - name: Create new tag (semver patch bump as placeholder)
        run: |
          latest=${{ steps.get_tag.outputs.latest_tag }}
          if [[ -z "$latest" ]]; then
            new_tag="v0.1.0"
          else
            IFS='.' read -r major minor patch <<< "${latest#v}"
            patch=$((patch + 1))
            new_tag="v$major.$minor.$patch"
          fi
          echo "New tag: $new_tag"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "$new_tag"
          git push origin "$new_tag"
